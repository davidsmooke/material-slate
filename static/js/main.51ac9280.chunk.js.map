{"version":3,"sources":["../../src/slate/MaterialEditor.js","../../src/plugins/withBase.js","../../src/plugins/withMarks.js","../../src/plugins/withBlocks.js","../../src/plugins/withComments.js","../../src/slate-react/MaterialSlate.jsx","../../node_modules/is-hotkey/lib/index.js","../../src/slate-react/defaultRenderElement.js","../../src/slate-react/defaultRenderLeaf.js","../../src/slate-react/MaterialEditable.jsx","../../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../../node_modules/@babel/runtime/helpers/extends.js","../../node_modules/@material-ui/icons/utils/createSvgIcon.js","../../node_modules/@material-ui/icons/CropSquareOutlined.js","../../src/components/Buttons/ToolbarButton.jsx","../../node_modules/@material-ui/icons/FormatBold.js","../../src/components/Buttons/BoldButton.jsx","../../node_modules/@material-ui/icons/FormatItalicOutlined.js","../../src/components/Buttons/ItalicButton.jsx","../../node_modules/@material-ui/icons/FormatUnderlined.js","../../src/components/Buttons/UnderlinedButton.jsx","../../node_modules/@material-ui/icons/StrikethroughS.js","../../src/components/Buttons/StrikethroughButton.jsx","../../node_modules/@material-ui/icons/Code.js","../../src/components/Buttons/CodeButton.jsx","../../node_modules/@material-ui/icons/FormatListBulleted.js","../../src/components/Buttons/BulletedListButton.jsx","../../node_modules/@material-ui/icons/FormatListNumbered.js","../../src/components/Buttons/NumberedListButton.jsx","../../src/components/Toolbars/Toolbar.jsx","../../src/components/Toolbars/HoveringToolbar.jsx","../../src/components/SimpleDialog.jsx","../../node_modules/@material-ui/icons/AddCommentOutlined.js","../../src/components/Buttons/AddCommentButton.jsx","../../node_modules/@material-ui/icons/CallToActionOutlined.js","../../src/components/Buttons/EndnoteButton.jsx","../../src/components/Elements/CommentElement.jsx","../../src/components/Elements/EndnoteElement.jsx","../../src/components/Counters/WordCounter.jsx","../../src/components/Counters/CharCounter.jsx","../../src/index.js","../../src/components/Buttons/ButtonSeparator.jsx","../../src/slate/createMaterialEditor.js","../../src/plugins/withCounter.js","../../src/plugins/withEndnotes.js","initialValue.js","Basic.js","Hovering.js","CustomButtons.js","Counter.js","ReadOnly.js","Advanced.js","App.js","serviceWorker.js","index.js"],"names":["MaterialEditor","Editor","withBase","editor","Range","ReactEditor","type","Transforms","match","n","nodes","selection","wrapSelection","node","split","edge","unwrap","listOfIds","nodesToKeep","map","nodesToKeepObj","editorNodes","data","at","list","Array","item","Node","key","Object","keys","find","nodeToUpdate","id","withMarks","mark","marks","withBlocks","isActive","isList","block","selected","children","useStyles","makeStyles","theme","root","borderRadius","border","borderColor","primary","focused","main","MaterialSlate","value","onChange","className","focusClassName","classes","useState","isFocused","setIsFocused","onBlur","onFocus","PropTypes","defineProperty","exports","IS_MAC","window","test","navigator","platform","MODIFIERS","alt","control","meta","shift","ALIASES","add","break","cmd","command","ctl","ctrl","del","down","esc","ins","left","mod","opt","option","return","right","space","spacebar","up","win","windows","CODES","backspace","tab","enter","pause","capslock","escape","pageup","pagedown","end","home","arrowleft","arrowup","arrowright","arrowdown","insert","delete","numlock","scrolllock","'","f","isHotkey","hotkey","options","event","isArray","array","string","parseHotkey","check","e","some","object","compareHotkey","byKey","ret","values","replace","length","k","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","optional","endsWith","slice","name","toKeyName","modifier","which","toKeyCode","err","expected","actual","toLowerCase","toUpperCase","charCodeAt","defaultRenderElement","element","attributes","defaultRenderLeaf","leaf","text","editable","paddingLeft","paddingRight","paddingBottom","fontFamily","MaterialEditable","renderElement","renderLeaf","placeholder","hotkeys","onHotkey","props","useSlate","allHotkeys","handleRenderElement","useCallback","handleRenderLeaf","onKeyDown","distance","unit","pressedKeys","handleOnKeyDown","propTypes","onHotKey","func","module","obj","__esModule","_extends","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","path","displayName","Component","_react","default","memo","forwardRef","ref","createElement","_SvgIcon","_extends2","muiName","_interopRequireDefault","require$$0","require$$1","require$$2","_default","d","ToolbarButton","tooltip","placement","icon","disabled","disableOnSelection","disableOnCollapse","format","onMouseDown","rest","defaultTooltip","handleOnMouseDown","checkIsActive","isDisabled","aria-label","color","title","React","BoldButton","ItalicButton","UnderlinedButton","StrikethroughButton","CodeButton","BulletedListButton","NumberedListButton","toolbar","backgroundColor","padding","Portal","ReactDOM","document","hoveringToolbar","position","zIndex","top","opacity","transition","SimpleDialog","open","label","defaultValue","onCancel","onSave","setValue","handleOnCancel","onClose","aria-labelledby","aria-describedby","fullWidth","maxWidth","multiline","autoFocus","variant","required","onClick","AddCommentButton","EndnoteButton","cursor","marginTop","marginLeft","textError","WordCounter","maxWords","wordsLength","errorExceedWordsLimit","number","CharCounter","maxChars","charLength","errorExceedCharsLimit","console","other","useTheme","display","borderLeft","marginRight","useRef","useEffect","el","rect","domSelection","editorId","withHistory","withReact","createEditor","isInline","content","isVoid","previous","endnotes","endnote","initialValue","bold","italic","code","Basic","useMemo","createMaterialEditor","Hovering","highlighted","bigger","fontSize","customSlate","palette","grey","borderWidth","customEditable","CustomButtons","Counter","withCounter","Divider","Box","justifyContent","mr","ReadOnly","readOnly","Advanced","withEndnotes","withComments","openCommentDialog","setOpenCommentDialog","openEndnoteDialog","setOpenEndnoteDialog","comments","setComments","setEndnotes","onCustomButtonDown","rememberCurrentSelection","log","handleDialogCancel","handleDialogSave","dialogValue","comment","Date","getTime","body","addComment","index","addEndnote","previousNode","previousEndnoteNode","indexOf","newEndnotes","splice","newEndnotes2","syncComments","syncEndnotes","Grid","container","spacing","sm","Typography","List","dense","ListItem","ListItemText","ListItemSecondaryAction","IconButton","commentId","newList","filter","handleDeleteComment","endnoteId","handleDeleteEndnote","intro","air","margin","readable","App","href","Boolean","location","hostname","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51ac9280.chunk.js","sourcesContent":["import { Editor } from 'slate'\n\nconst MaterialEditor = {\n    ...Editor,\n}\n\nexport default MaterialEditor","import MaterialEditor from '../slate/MaterialEditor'\nimport { Range } from 'slate'\nimport { Transforms } from 'slate'\nimport { Node } from 'slate'\nimport {ReactEditor} from 'slate-react'\n/**\n *\n * Base plugin for Material Slate.\n *\n * All other plugins assume this plugin exists and has been included.\n *\n * @param {Editor} editor\n */\nconst withBase = editor => {\n  /**\n   * Is the current editor selection a range, that is the focus and the anchor are different?\n   *\n   * @returns {boolean} true if the current selection is a range.\n   */\n  editor.isSelectionExpanded = () => {\n    return editor.selection ? Range.isExpanded(editor.selection) : false\n  }\n\n  /**\n   * Returns true if current selection is collapsed, that is there is no selection at all\n   * (the focus and the anchor are the same).\n   *\n   * @returns {boolean} true if the selection is collapsed\n   */\n  editor.isSelectionCollapsed = () => {\n    return !editor.isSelectionExpanded()\n  }\n\n  /**\n   * Is the editor focused?\n   * @returns {boolean} true if the editor has focus. */\n  editor.isFocused = () => {\n    return  ReactEditor.isFocused(editor)\n  }\n\n  /**\n   * Unwraps any node of `type` within the current selection.\n   */\n  editor.unwrapNode = type => {\n    Transforms.unwrapNodes(editor, { match: n => n.type === type })\n  }\n\n  /**\n   *\n   * @param {string} type type of node to be checked. Example: `comment`, `numbered-list`\n   *\n   * @returns {bool} true if within current selection there is a node of type `type`\n   */\n  editor.isNodeTypeActive = type => {\n    const [node] = MaterialEditor.nodes(editor, { match: n => n.type === type })\n    return !!node\n  }\n\n  /**\n   * Variable for holding a selection may be forgotten.\n   */\n  editor.rememberedSelection = {}\n\n  /**\n   * Gets current selection and stores it in rememberedSelection.\n   *\n   * This may be useful when you need to open a dialog box and the editor loses the focus\n   */\n  editor.rememberCurrentSelection = () => {\n    editor.rememberedSelection = editor.selection\n  }\n\n  /**\n   * Is the current selection collapsed?\n   */\n  editor.isCollapsed = () => {\n    const { selection } = editor\n    //console.log('selection', selection)\n    return selection && Range.isCollapsed(selection)\n  }\n\n  /**\n   * Wraps a selection with an argument. If `wrapSelection` is not passed\n   * uses current selection\n   *\n   * Upon wrapping moves the cursor to the end.\n   *\n   * @param {Node} node the node to be added\n   * @param {Selection} wrapSelection selection of the text that will be wrapped with the node.\n   *\n   */\n  editor.wrapNode = (node, wrapSelection = null) => {\n    //if wrapSelection is passed => we use it. Use editor selection in other case\n    editor.selection = wrapSelection ? wrapSelection : editor.selection\n\n    // if the node is already wrapped with current node we unwrap it first.\n    if (editor.isNodeTypeActive(node.type)) {\n      editor.unwrapNode(node.type)\n    }\n    // if there is no text selected => insert the node.\n    //console.log(editor.selection)\n    //console.log('isLocation', Location.isLocation(editor.selection))\n    if (editor.isCollapsed()) {\n      //console.log('is collapsed insertNodes')\n      Transforms.insertNodes(editor, node)\n    } else {\n      //text is selected => add the node\n      Transforms.wrapNodes(editor, node, { split: true })\n      //console.log('editor', editor.children)\n      Transforms.collapse(editor, { edge: 'end' })\n    }\n  }\n\n  /**\n   * Unwraps or removes the nodes that are not in the list.\n   *\n   * It will search for all the nodes of `type` in the editor and will keep only\n   * the ones in the nodesToKeep.\n   *\n   * It assumes each item of nodesToKeep has an attribute `id`. This attribute will be the discriminator.\n   *\n   */\n  editor.syncExternalNodes = (type, nodesToKeep, unwrap = true) => {\n    //extracts the id from the nodes and removes those that are not in the list\n    const listOfIds = nodesToKeep.map(node => node.id)\n\n    if (unwrap) {\n      editor.unwrapNotInList(type, listOfIds)\n    } else {\n      editor.removeNotInList(type, listOfIds)\n    }\n    const nodesToKeepObj = {}\n    //Update values of nodes.data\n    //Create a map by id of the nodes to keep\n    nodesToKeep.forEach(node => (nodesToKeepObj[node.id] = node))\n    //Find nodes of this type remaining in the editor\n    const editorNodes = editor.findNodesByType(type)\n    //Update them\n    editorNodes.map(node => {\n      Transforms.setNodes(\n        editor,\n        { data: nodesToKeepObj[node.id] },\n        { match: n => n.id == node.id, at: [] }\n      )\n    })\n  }\n\n  /**\n   * Removes the nodes that are not in the list of Ids\n   *\n   * Nodes of type `type` shall have the attribute/property `id`\n   *\n   * Example:\n   * ```\n   * {\n   *    type: `comment`\n   *    id: 30\n   *    data: { ... }\n   *  }\n   * ```\n   */\n  editor.removeNotInList = (type, listOfIds) => {\n    Transforms.removeNodes(editor, {\n      match: n => n.type === type && !listOfIds.includes(n.id),\n      at: [], //Search the whole editor content\n    })\n  }\n\n  /**\n   *\n   * Unwraps the nodes of `type` whose ids are not in the provided list\n   *\n   * It assumes the nodes of `type` have an attribute `id`. The `id` may be a number or string.\n   *\n   * @param {string} type node type to be searched. Example: `comment`\n   * @param {Array} listOfIds Array with the list of ids. Example: [1, 2, 3].\n   */\n  editor.unwrapNotInList = (type, listOfIds) => {\n    Transforms.unwrapNodes(editor, {\n      match: n => n.type === type && !listOfIds.includes(n.id),\n      at: [], //Search the whole editor content\n    })\n  }\n\n  /**\n   * Gets from current editor content the list of items of a particular type\n   */\n  editor.findNodesByType = type => {\n    const list = MaterialEditor.nodes(editor, {\n      match: n => n.type === type,\n      at: [],\n    })\n    // List in editor with path and node\n    const listWithNodesAndPath = Array.from(list)\n    // List with node (element)\n    const listWithNodes = listWithNodesAndPath.map(item => {\n      return item[0]\n    })\n    //console.log('fondNodesByType ', listWithNodes)\n    return listWithNodes\n  }\n\n  /**\n   * Returns the serialized value (plain text)\n   */\n  editor.serialize = nodes => {\n    return nodes.map(n => Node.string(n)).join('\\n')\n  }\n\n  /**\n   * Functions similar to syncExternalNodes,and also updates the node temporaryId with original id and data\n   *\n   * First, It will search for match in temporaryId's in nodesToKeep with id's of nodes and updates it with latest data\n   * Then, updates data in node id's matching with nodesToKeep id's\n   *\n   * Unwraps or removes the nodes that are not in the list.\n   */\n  editor.syncExternalNodesWithTemporaryId = (\n    type,\n    nodesToKeep,\n    unwrap = true\n  ) => {\n    //extracts the id from the nodes and removes those that are not in the list\n    const listOfIds = nodesToKeep.map(node => node.id)\n\n    const nodesToKeepObj = {}\n    //Update values of nodes.data\n    //Create a map by id of the nodes to keep\n    nodesToKeep.forEach(node => (nodesToKeepObj[node.id] = node))\n    //Find nodes of this type remaining in the editor\n    const editorNodes = editor.findNodesByType(type)\n    //Update them\n    editorNodes.map(node => {\n      // Find the key of node to update\n      const key = Object.keys(nodesToKeepObj).find(\n        key => nodesToKeepObj[key].temporaryId === node.id\n      )\n\n      // node to Update with original Id and data\n      const nodeToUpdate = nodesToKeepObj[key]\n      // If node.id exists\n      if (nodesToKeepObj[node.id] && !nodeToUpdate) {\n        Transforms.setNodes(\n          editor,\n          { data: nodesToKeepObj[node.id] },\n          { match: n => n.id == node.id, at: [0] }\n        )\n        // TemporaryId and data will be replaced with new id and data\n      } else if (key && nodeToUpdate) {\n        Transforms.setNodes(\n          editor,\n          { id: nodeToUpdate.id, data: nodeToUpdate },\n          { match: n => n.id == nodeToUpdate.temporaryId, at: [] }\n        )\n      } else if (unwrap) {\n        // unwraps the nodes in not list\n        editor.unwrapNotInList(type, listOfIds)\n      } else {\n        // removes the nodes in not list\n        editor.removeNotInList(type, listOfIds)\n      }\n    })\n  }\n\n  return editor\n}\n\nexport default withBase\n","import MaterialEditor from '../slate/MaterialEditor'\n\n/**\n * Helper functions for managing inline marks\n * \n * @param {Editor} editor \n */\nconst withMarks = editor => { \n  \n  /**\n   * Checks if the mark is active\n   * \n   * @param {String} mark Mark to validate For example: 'bold', 'italic'\n   */\n  editor.isMarkActive = mark => {\n    const marks = MaterialEditor.marks(editor)\n    return marks ? marks[mark] === true : false\n  }\n\n  /**\n   * Toggles on/off the mark. If the mark exists it is removed and vice versa.\n   *   \n   * @param {String} mark Mark to validate For example: 'bold', 'italic'\n   */ \n   editor.toggleMark = mark => { \n    editor.isMarkActive(mark) ? MaterialEditor.removeMark(editor, mark) : MaterialEditor.addMark(editor, mark, true)\n  }\n  return editor\n}\n\nexport default withMarks","import MaterialEditor from '../slate/MaterialEditor'\nimport { Transforms } from 'slate'\n\n/**\n * Simple block handling\n * \n * @param {Editor} editor \n */\nconst withBlocks = editor => {\n  editor.LIST_TYPES = ['numbered-list', 'bulleted-list']\n\n  /**\n   * checks if a block is active\n   */\n  editor.isBlockActive = (block) => {\n    const [match] = MaterialEditor.nodes(editor, {\n      match: n => n.type === block,\n    })\n    return !!match\n  }\n\n  /**\n   * Toggles the block in the current selection\n   */\n  editor.toggleBlock = (block) => {\n    const isActive = editor.isBlockActive(block)\n    const isList = editor.LIST_TYPES.includes(block)\n\n    Transforms.unwrapNodes(editor, {\n      match: n => editor.LIST_TYPES.includes(n.type),\n      split: true,\n    })\n\n    //TODO cannot this be generalized??\n    Transforms.setNodes(editor, {\n      type: isActive ? 'paragraph' : isList ? 'list-item' : block,\n    })\n\n    if (!isActive && isList) {\n      const selected = { type: block, children: [] }\n      Transforms.wrapNodes(editor, selected)\n    }\n  }\n  return editor\n}\n\nexport default withBlocks","const withComments = editor => {\n\n  const { isInline } = editor\n\n  const COMMENT_TYPE = 'comment'\n  \n  /**\n   * Set comment type not to be an inline element\n   */\n  editor.isInline = element => {\n    return element.type === COMMENT_TYPE ? true : isInline(element)\n  }\n\n  /**\n   * If the editor loses focus upon pressing the `AddCommentButton`, you need to call \n   * editor.rememberCurrentSelection() before the editor loses the focus  \n   * \n   * `data` cannot contain the following items: id, type or children.\n   */ \n  editor.addComment = (id, data) => {\n    const node = {\n      id: id,\n      type: COMMENT_TYPE,\n      children: [], \n      data //any data of the comment will be an attribute.\n    } \n    editor.wrapNode(node, editor.selection || editor.rememberedSelection)  \n  }\n  \n  /**\n   * Synchronizes comments.\n   * \n   * It receives a list of comments. \n   *  - Comments that are in the editor but not in the list are deleted\n   *  - Contents of the comments that are in the list are updated.\n   * \n   * Each comment is identified by `id` attribute in the node.\n   * \n   * @param {Array} commentsToKeep is a list of comment objects that have an attribute `id`.\n   */\n  editor.syncComments = (commentsToKeep) => {\n    editor.syncExternalNodes(COMMENT_TYPE, commentsToKeep)\n  }\n\n  return editor\n}\nexport default withComments\n","\nimport React from 'react'\nimport { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Slate } from 'slate-react'\nimport Box from '@material-ui/core/Box'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    borderRadius: theme.shape.borderRadius,\n    border: '1px solid',\n    borderColor: theme.palette.grey[400],\n    '&:hover': {\n      borderColor: theme.palette.text.primary,\n    },\n  },\n  focused: {\n    borderColor: theme.palette.primary.main,\n    '&:hover': {\n      borderColor: theme.palette.primary.main,\n    },\n  }\n}))\n\n/**\n * Rich Slate\n *\n * It is the provider of the useSlate hook.\n *\n *\n */\nexport default function MaterialSlate({\n  value,\n  editor,\n  onChange,\n  children,\n  className,\n  focusClassName\n}) {\n  const classes = useStyles()\n  const [isFocused, setIsFocused] = useState(false)\n  return (\n    <Box onBlur={()=> setIsFocused(false)} onFocus={() => setIsFocused(true)} className={`${classes.root} ${isFocused && (focusClassName ? focusClassName : classes.focused)} ${className}`}>\n    <Slate value={value} editor={editor} onChange={value => onChange(value)}>\n        {children}\n    </Slate>\n    </Box>\n  )\n}\n\nMaterialSlate.propTypes = {\n  /** editor created using createRichEditor() */\n  editor: PropTypes.object.isRequired,\n  /** content to display in the editor*/\n  value: PropTypes.arrayOf(PropTypes.object).isRequired,\n  /** Called every time there is a change on the value */\n  onChange: PropTypes.func,\n  /** class to override and style the slate  */\n  className: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  /** className to apply when the editor has focus */\n  focusClassName: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\n}\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Constants.\n */\n\nvar IS_MAC = typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nvar MODIFIERS = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\n\nvar ALIASES = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta'\n};\n\nvar CODES = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  ' ': 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  '\\'': 222\n};\n\nfor (var f = 1; f < 20; f++) {\n  CODES['f' + f] = 111 + f;\n}\n\n/**\n * Is hotkey?\n */\n\nfunction isHotkey(hotkey, options, event) {\n  if (options && !('byKey' in options)) {\n    event = options;\n    options = null;\n  }\n\n  if (!Array.isArray(hotkey)) {\n    hotkey = [hotkey];\n  }\n\n  var array = hotkey.map(function (string) {\n    return parseHotkey(string, options);\n  });\n  var check = function check(e) {\n    return array.some(function (object) {\n      return compareHotkey(object, e);\n    });\n  };\n  var ret = event == null ? check : check(event);\n  return ret;\n}\n\nfunction isCodeHotkey(hotkey, event) {\n  return isHotkey(hotkey, event);\n}\n\nfunction isKeyHotkey(hotkey, event) {\n  return isHotkey(hotkey, { byKey: true }, event);\n}\n\n/**\n * Parse.\n */\n\nfunction parseHotkey(hotkey, options) {\n  var byKey = options && options.byKey;\n  var ret = {};\n\n  // Special case to handle the `+` key since we use it as a separator.\n  hotkey = hotkey.replace('++', '+add');\n  var values = hotkey.split('+');\n  var length = values.length;\n\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n  for (var k in MODIFIERS) {\n    ret[MODIFIERS[k]] = false;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      var optional = value.endsWith('?') && value.length > 1;\n\n      if (optional) {\n        value = value.slice(0, -1);\n      }\n\n      var name = toKeyName(value);\n      var modifier = MODIFIERS[name];\n\n      if (length === 1 || !modifier) {\n        if (byKey) {\n          ret.key = name;\n        } else {\n          ret.which = toKeyCode(value);\n        }\n      }\n\n      if (modifier) {\n        ret[modifier] = optional ? null : true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compare.\n */\n\nfunction compareHotkey(object, event) {\n  for (var key in object) {\n    var expected = object[key];\n    var actual = void 0;\n\n    if (expected == null) {\n      continue;\n    }\n\n    if (key === 'key' && event.key != null) {\n      actual = event.key.toLowerCase();\n    } else if (key === 'which') {\n      actual = expected === 91 && event.which === 93 ? 91 : event.which;\n    } else {\n      actual = event[key];\n    }\n\n    if (actual == null && expected === false) {\n      continue;\n    }\n\n    if (actual !== expected) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Utils.\n */\n\nfunction toKeyCode(name) {\n  name = toKeyName(name);\n  var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n  return code;\n}\n\nfunction toKeyName(name) {\n  name = name.toLowerCase();\n  name = ALIASES[name] || name;\n  return name;\n}\n\n/**\n * Export.\n */\n\nexports.default = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;","\nimport React from 'react'\n\nexport default function defaultRenderElement({ element, children, attributes, ...rest }) { \nswitch (element.type) {\n  case 'block-quote':\n    return <blockquote {...attributes}>{children}</blockquote>\n  case 'bulleted-list':\n    return <ul {...attributes}>{children}</ul>\n  case 'heading-one':\n    return <h1 {...attributes}>{children}</h1>\n  case 'heading-two':\n    return <h2 {...attributes}>{children}</h2>\n  case 'list-item':\n    return <li {...attributes}>{children}</li>\n  case 'numbered-list':\n    return <ol {...attributes}>{children}</ol>\n  default:\n    return <p {...attributes}>{children}</p> \n}\n}","import React from 'react'\n\n/**\n * Default renderer of leafs. \n * \n * Handles the following type of leafs `bold` (strong), `code` (code), `italic` (em), `strikethrough` (del), `underlined`(u).\n * \n * @param {Object} props \n */\n\nexport default function defaultRenderLeaf({ leaf, attributes, children, text }) {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n  if (leaf.code) {\n    children = <code>{children}</code>\n  }\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n  if (leaf.strikethrough) {\n    children = <del>{children}</del>\n  }\n  if (leaf.underlined) {\n    children = <u>{children}</u>\n  }\n  return <span {...attributes}>{children}</span> \n}","import React, { useCallback } from 'react'\nimport { Transforms } from 'slate'\nimport { Editable, useSlate } from 'slate-react'\nimport PropTypes from 'prop-types'\nimport isHotkey from 'is-hotkey'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport defaultRenderElement from './defaultRenderElement'\nimport defaultRenderLeaf from './defaultRenderLeaf'\n\nconst useStyles = makeStyles(theme => ({\n  editable: {\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n    fontFamily: theme.typography.fontFamily,\n  },\n}))\n\n/**\n * Wrapper of Slate Editable\n *\n */\nexport default function MaterialEditable({\n  renderElement,\n  renderLeaf,\n  placeholder,\n  hotkeys,\n  onHotkey,\n  children,\n  className,\n  ...props\n}) {\n  const editor = useSlate()\n\n  const defaultHotKeys = {\n    'mod+b': {\n      type: 'mark',\n      value: 'bold',\n    },\n    'mod+i': {\n      type: 'mark',\n      value: 'italic',\n    },\n    'mod+u': {\n      type: 'mark',\n      value: 'underlined',\n    },\n    'mod+`': {\n      type: 'mark',\n      value: 'code',\n    },\n    'shift+enter': {\n      type: 'newline',\n      value: '',\n    },\n  }\n\n  const allHotkeys = {\n    ...defaultHotKeys,\n    ...hotkeys,\n  }\n  const classes = useStyles()\n\n  // Define a rendering function based on the element passed to `props`.\n  // Props is deconstructed in the {element, attributes, children, rest (any other prop)\n  // We use `useCallback` here to memoize the function for subsequent renders.\n  const handleRenderElement = useCallback(props => {\n    return renderElement ? renderElement(props) : defaultRenderElement(props)\n  }, [])\n\n  const handleRenderLeaf = useCallback(props => {\n    return renderLeaf ? renderLeaf(props) : defaultRenderLeaf(props)\n  }, [])\n\n  const handleOnKeyDown = event => {\n    for (const pressedKeys in allHotkeys) {\n      if (isHotkey(pressedKeys, event)) {\n        const hotkey = allHotkeys[pressedKeys]\n        //console.log(hotkey)\n        event.preventDefault()\n        if (hotkey.type === 'mark') {\n          editor.toggleMark(hotkey.value)\n        }\n        if (hotkey.type === 'block') {\n          editor.toggleBlock(hotkey.value)\n        }\n        if (hotkey.type === 'newline') {\n          editor.insertText('\\n')\n          //The following line updates the cursor\n          Transforms.move(editor, { distance: 0, unit: 'offset' })\n        }\n        return (\n          onHotkey &&\n          onHotkey({ event, editor, hotkey, pressedKeys, allHotkeys })\n        )\n      }\n    }\n  }\n  return (\n    <Editable\n      renderElement={handleRenderElement}\n      renderLeaf={handleRenderLeaf}\n      onKeyDown={event => handleOnKeyDown(event)}\n      placeholder={placeholder}\n      className={`${classes.editable} ${className}`}\n      {...props}\n    >\n      {children}\n    </Editable>\n  )\n}\n\n// Specifies the default values for props:\nMaterialEditable.defaultProps = {\n  placeholder: 'Type some text...',\n}\n\n// TODO add info about arguments in functions\n\nMaterialEditable.propTypes = {\n  /** To style and override the existing class  */\n  className: PropTypes.oneOfType(PropTypes.string, PropTypes.object),\n  /** Called when an element needs to be rendered */\n  renderElement: PropTypes.func,\n  /** Called when a leaf needs to be rendered */\n  renderLeaf: PropTypes.func,\n  /** Text to display when there are no contents on the editor. Default\" \"Type some text...\" */\n  placeholder: PropTypes.string,\n  /**\n   * Additional hotkeys to be added other than default. Object of the form `{'mod+k': {type: 'mark', value: 'italic'}\n   */\n  hotkeys: PropTypes.object,\n  /**\n   * Event tht will be triggered in case a hotkey is detected\n   * It has one single argument that can be deconstructed in `{event, editor, hotkey, pressedKeys, allHotkeys}`\n   */\n  onHotKey: PropTypes.func,\n}\n","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createSvgIcon;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _SvgIcon = _interopRequireDefault(require(\"@material-ui/core/SvgIcon\"));\n\nfunction createSvgIcon(path, displayName) {\n  var Component = _react.default.memo(_react.default.forwardRef(function (props, ref) {\n    return _react.default.createElement(_SvgIcon.default, (0, _extends2.default)({\n      ref: ref\n    }, props), path);\n  }));\n\n  if (process.env.NODE_ENV !== 'production') {\n    Component.displayName = \"\".concat(displayName, \"Icon\");\n  }\n\n  Component.muiName = _SvgIcon.default.muiName;\n  return Component;\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H6V6h12v12z\"\n}), 'CropSquareOutlined');\n\nexports.default = _default;","import React from 'react'\nimport { useSlate } from 'slate-react'\nimport PropTypes from 'prop-types'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport CropSquareOutlined from '@material-ui/icons/CropSquareOutlined'\n\n/**\n * ToolbarButton is the base button for any button on the toolbars.\n * It requires the `type` of action to perform and the format that will be added.\n *\n * It displays a tooltip text on hover. If tooltip text is not passed as a prop it will use the capitalized text of the format\n */\nconst ToolbarButton = React.forwardRef(\n  (\n    {\n      tooltip,\n      placement,\n      icon,\n      type,\n      disabled,\n      disableOnSelection,\n      disableOnCollapse,\n      format,\n      onMouseDown,\n      isActive,\n      ...rest\n    },\n    ref\n  ) => {\n    const editor = useSlate()\n\n    /**\n     * If no tooltip prop is passed it generates a default based on the format string.\n     * Converts - into spaces and uppercases the first letter of the first word.\n     */\n    const defaultTooltip = () => {\n      return (format.charAt(0).toUpperCase() + format.substring(1)).replace(\n        '-',\n        ' '\n      )\n    }\n\n    /**\n     * Toggles mark| block and forwards the onMouseDown event\n     */\n    const handleOnMouseDown = event => {\n      event.preventDefault()\n      switch (type) {\n        case 'mark':\n          editor.toggleMark(format)\n          break\n        case 'block':\n          editor.toggleBlock(format)\n      }\n      onMouseDown && onMouseDown({ editor, format, type, event })\n    }\n\n    const checkIsActive = () => {\n      if (isActive) {\n        return isActive()\n      }\n\n      switch (type) {\n        case 'mark':\n          return editor.isMarkActive(format)\n        case 'block':\n          return editor.isBlockActive(format)\n      }\n      return\n    }\n\n    /**\n     * Conditionally disables the button\n     */\n    const isDisabled = () => {\n      let disabled = false\n      disabled = disableOnSelection ? editor.isSelectionExpanded() : false\n      disabled = disableOnCollapse ? editor.isSelectionCollapsed() : disabled\n      return disabled\n    }\n\n    return disabled || isDisabled() ? (\n      <IconButton\n        aria-label={tooltip ? tooltip : defaultTooltip()}\n        ref={ref}\n        color={checkIsActive() ? 'secondary' : 'default'}\n        onMouseDown={event => handleOnMouseDown(event)}\n        disabled={disabled || isDisabled()}\n        {...rest}\n      >\n        {icon}\n      </IconButton>\n    ) : (\n      <Tooltip\n        title={tooltip ? tooltip : defaultTooltip()}\n        placement={placement}\n      >\n        <IconButton\n          aria-label={tooltip ? tooltip : defaultTooltip()}\n          ref={ref}\n          color={checkIsActive() ? 'secondary' : 'default'}\n          onMouseDown={event => handleOnMouseDown(event)}\n          disabled={disabled || isDisabled()}\n          {...rest}\n        >\n          {icon}\n        </IconButton>\n      </Tooltip>\n    )\n  }\n)\n\nexport default ToolbarButton\n\nToolbarButton.defaultProps = {\n  placement: 'top',\n  icon: <CropSquareOutlined />,\n  disableOnCollapse: false,\n  disableOnSelection: false,\n}\n\n// PropTypes\nToolbarButton.propTypes = {\n  /**\n   * Text displayed on the button tooltip. By Default it is the capitalized `format` string.\n   * For instance, `bold` is displayed as `Bold`.\n   */\n  tooltip: PropTypes.string,\n\n  /**\n   * Location where the tooltip will appear.\n   * It can be `top`, `bottom`, `left`, `right`. Defaults to top.\n   */\n  placement: PropTypes.string,\n\n  /**\n   * Toolbar button has the option of adding to the editor value marks and blocks.\n   *\n   * `mark` can be added to the editor value when you want to add something like `bold`, `italic`...\n   *  Marks are rendered into HTML in `renderLeaf` of `MaterialEditable`\n   *\n   * `block` to be added to the editor `value` when the button is pressed. For example: `header1`, `numbered-list`...\n   *  `renderElement` of the `RichEditable` component will need to handle the actual conversion from mark to HTML/Component on render time.\n   *\n   * If you don't want to add a mark or a block do not set the prop or use whatever string.\n   * You can perform the action the button triggers using onMouseDown().\n   */\n  type: PropTypes.string,\n\n  /**\n   *\n   * The string that identifies the format of the block or mark to be added. For example: `bold`, `header1`...\n   */\n  format: PropTypes.string.isRequired,\n\n  /**\n   *\n   * When a button is active it means the button is highlighted. For example, if in current position of the cursor,\n   * the text is bold, the bold button should be active.\n   *\n   * isActive is a function that returns true/false to indicate the status of the mark/block.\n   * Set this function if you need to handle anything other than standard mark or blocks.\n   */\n  isActive: PropTypes.func,\n\n  /**\n   * Unconditionally disables the button\n   *\n   * Disable a button means that the button cannot be clicked (note it is not the opposite of isActive)\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If true, disables the button if there is a text selected on the editor.\n   *\n   * Disable a button means that the button cannot be clicked.\n   *\n   * Use either disableOnSelection or disableOnCollapse, but not both.\n   */\n  disableOnSelection: PropTypes.bool,\n\n  /**\n   * If true, disables the button when  there is no text selected or the editor has no focus.\n   *\n   * Disable a button means that button cannot be clicked.\n   *\n   * Use either disableOnSelection or disableOnCollapse, but not both.\n   */\n  disableOnCollapse: PropTypes.bool,\n\n  /**\n   * Instance a component. The icon that will be displayed. Typically an icon from @material-ui/icons\n   */\n  icon: PropTypes.object,\n\n  /**\n   * On mouse down event is passed up to the parent with props that can be deconstructed in {editor, event, mark/block}\n   */\n  onMouseDown: PropTypes.func,\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z\"\n}), 'FormatBold');\n\nexports.default = _default;","import React from 'react'\nimport ToolbarButton from './ToolbarButton'\nimport FormatBold  from '@material-ui/icons/FormatBold'\n\n/**\n * Toolbar button for bold text mark\n * \n * @see ToolbarButton\n */\n\nconst BoldButton = React.forwardRef(\n  (props, ref) => (\n    <ToolbarButton icon={<FormatBold />} type=\"mark\" format=\"bold\" ref={ref} {...props} />\n  )\n)\nexport default BoldButton  ","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4h-8z\"\n}), 'FormatItalicOutlined');\n\nexports.default = _default;","import React from 'react'\nimport ToolbarButton from './ToolbarButton'\nimport FormatItalicOutlined  from '@material-ui/icons/FormatItalicOutlined'\n\n/**\n * Toolbar button for italic text mark\n * \n * @see ToolbarButton\n */\n\nconst ItalicButton = React.forwardRef(\n  (props, ref) => (\n    <ToolbarButton icon={<FormatItalicOutlined />} type=\"mark\" format=\"italic\" ref={ref} {...props} />\n  )\n)\nexport default ItalicButton  ","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z\"\n}), 'FormatUnderlined');\n\nexports.default = _default;","import React from 'react'\nimport ToolbarButton from './ToolbarButton'\nimport FormatUnderlined  from '@material-ui/icons/FormatUnderlined'\n\n/**\n * Toolbar button for underlined text mark\n * \n * @see ToolbarButton\n */\nconst UnderlinedButton = React.forwardRef(\n  (props, ref) => (\n    <ToolbarButton icon={<FormatUnderlined />} type=\"mark\" format=\"underlined\" ref={ref} {...props} />\n  )\n)\nexport default UnderlinedButton  ","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M6.85 7.08C6.85 4.37 9.45 3 12.24 3c1.64 0 3 .49 3.9 1.28.77.65 1.46 1.73 1.46 3.24h-3.01c0-.31-.05-.59-.15-.85-.29-.86-1.2-1.28-2.25-1.28-1.86 0-2.34 1.02-2.34 1.7 0 .48.25.88.74 1.21.38.25.77.48 1.41.7H7.39c-.21-.34-.54-.89-.54-1.92zM21 12v-2H3v2h9.62c1.15.45 1.96.75 1.96 1.97 0 1-.81 1.67-2.28 1.67-1.54 0-2.93-.54-2.93-2.51H6.4c0 .55.08 1.13.24 1.58.81 2.29 3.29 3.3 5.67 3.3 2.27 0 5.3-.89 5.3-4.05 0-.3-.01-1.16-.48-1.94H21V12z\"\n}), 'StrikethroughS');\n\nexports.default = _default;","import React from 'react'\nimport ToolbarButton from './ToolbarButton'\nimport StrikethroughSIcon from '@material-ui/icons/StrikethroughS';\n\n/**\n * Toolbar button for strike through text mark\n * \n * @see ToolbarButton\n */\n\nconst StrikethroughButton = React.forwardRef(\n  (props, ref) => (\n    <ToolbarButton icon={<StrikethroughSIcon />} type=\"mark\" format=\"strikethrough\" ref={ref} {...props} />\n  )\n)\nexport default StrikethroughButton  ","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"\n}), 'Code');\n\nexports.default = _default;","import React from 'react'\nimport ToolbarButton from './ToolbarButton'\nimport CodeIcon from '@material-ui/icons/Code'\n\n/**\n * Toolbar button for adding code mono-spaced text mark\n * \n * @see ToolbarButton\n */\n\nconst CodeButton = React.forwardRef(\n  (props, ref) => (\n  <ToolbarButton icon={<CodeIcon />} type=\"mark\" format=\"code\" ref={ref} {...props} />\n  )\n)\nexport default CodeButton  ","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M4 10.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0-6c-.83 0-1.5.67-1.5 1.5S3.17 7.5 4 7.5 5.5 6.83 5.5 6 4.83 4.5 4 4.5zm0 12c-.83 0-1.5.68-1.5 1.5s.68 1.5 1.5 1.5 1.5-.68 1.5-1.5-.67-1.5-1.5-1.5zM7 19h14v-2H7v2zm0-6h14v-2H7v2zm0-8v2h14V5H7z\"\n}), 'FormatListBulleted');\n\nexports.default = _default;","import React from 'react'\nimport ToolbarButton from './ToolbarButton'\nimport FormatListBulleted from '@material-ui/icons/FormatListBulleted'\n\n/**\n * Toolbar button for underlined text mark\n * \n * @see ToolbarButton\n * \n */\nconst BulletedListButton = React.forwardRef(\n  (props, ref) => (\n    <ToolbarButton icon={<FormatListBulleted />} type=\"block\" format=\"bulleted-list\" ref={ref} {...props} />\n  )\n)\nexport default BulletedListButton  ","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"\n}), 'FormatListNumbered');\n\nexports.default = _default;","import React from 'react'\nimport ToolbarButton from './ToolbarButton'\nimport FormatListNumbered from '@material-ui/icons/FormatListNumbered'\n\n/**\n * Toolbar button for numbered list block\n * \n * @see ToolbarButton\n */\n\nconst NumberedListButton = React.forwardRef(\n  (props, ref) => (\n    <ToolbarButton icon={<FormatListNumbered />} type=\"block\" format=\"numbered-list\" ref={ref} {...props} />\n  )\n)\nexport default NumberedListButton  ","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport {Box} from '@material-ui/core'\nimport BoldButton from '../Buttons/BoldButton'\nimport ItalicButton from '../Buttons/ItalicButton'\nimport UnderlinedButton from '../Buttons/UnderlinedButton'\nimport StrikethroughButton from '../Buttons/StrikethroughButton'\nimport CodeButton from '../Buttons/CodeButton'\nimport BulletedListButton from '../Buttons/BulletedListButton'\nimport NumberedListButton from '../Buttons/NumberedListButton'\n\n\nconst useStyles = makeStyles( theme => ({\n  toolbar: {\n    backgroundColor: theme.palette.grey[200],\n    padding: theme.spacing(1/4)\n  }\n  }))\n\n/**\n * Toolbar that appears on the top of the editor.\n * \n * It accepts any content as children. If no children are set it displays by default the following buttons:\n * Bold, italic, underline, strike through, code, bulleted list and numbered list\n */ \nexport default function Toolbar({children, className, ...props}) {\n  \n  const classes = useStyles()\n    return (\n        <Box className={classes.toolbar}  borderRadius=\"borderRadius\" {...props}>\n            {!children && \n            <React.Fragment> \n              <BoldButton />\n              <ItalicButton />\n              <UnderlinedButton />\n              <StrikethroughButton />\n              <CodeButton />\n              <BulletedListButton />\n              <NumberedListButton />\n            </React.Fragment>\n            }\n            {children && <React.Fragment>{children}</React.Fragment>}\n        </Box>\n    )   \n}","import React from 'react'\nimport { useRef, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Editor, Range } from 'slate'\nimport { ReactEditor, useSlate } from 'slate-react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\n\nimport BoldButton from '../Buttons/BoldButton'\nimport ItalicButton from '../Buttons/ItalicButton'\nimport UnderlinedButton from '../Buttons/UnderlinedButton'\nimport StrikethroughButton from '../Buttons/StrikethroughButton'\nimport CodeButton from '../Buttons/CodeButton'\n\nconst Portal = ({ children }) => {\n  return ReactDOM.createPortal(children, document.body)\n}\n\nconst useStyles = makeStyles(theme => ({\n  hoveringToolbar: {\n    position: 'absolute',\n    padding: theme.spacing(1 / 4),\n    zIndex: 1,\n    top: \"-10000px\",\n    left: \"-10000px\",\n    opacity: 0,\n    backgroundColor: theme.palette.grey[200],\n    transition: \"opacity 0.75s\"\n  }\n}))\n\n/**\n * A hovering toolbar that is, a toolbar that appears over a selected text, and only when there is \n * a selection. \n * \n * If no children are provided it displays the following buttons:\n * Bold, italic, underlined, strike through and code.\n * \n * Children will typically be `ToolbarButton`. \n */\nexport default function HoveringToolbar({ children, className, ...props }) {\n\n  const classes = useStyles()\n  const ref = useRef()\n  const editor = useSlate()\n\n  useEffect(() => {\n    const el = ref.current\n    const { selection } = editor\n\n    if (!el) {\n      return\n    }\n\n    if (\n      !selection ||\n      !ReactEditor.isFocused(editor) ||\n      Range.isCollapsed(selection) ||\n      Editor.string(editor, selection) === ''\n    ) {\n      el.removeAttribute('style')\n      return\n    }\n\n    const domSelection = window.getSelection()\n    const domRange = domSelection.getRangeAt(0)\n    const rect = domRange.getBoundingClientRect()\n    el.style.opacity = 1\n    el.style.top = `${rect.top + window.pageYOffset - el.offsetHeight - 4}px`\n    el.style.left = `${rect.left +\n      window.pageXOffset -\n      el.offsetWidth / 2 +\n      rect.width / 2}px`\n  })\n\n  return (\n    <Portal>\n      <Box\n        borderRadius=\"borderRadius\"\n        ref={ref}\n        className={className ? className : classes.hoveringToolbar}\n        {...props}>\n        {!children && <React.Fragment>\n          <BoldButton />\n          <ItalicButton />\n          <UnderlinedButton />\n          <StrikethroughButton />\n          <CodeButton />\n        </React.Fragment>\n        }\n        {children && children}\n      </Box>\n    </Portal>\n  )\n}\n","import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle' \nimport DialogContent from '@material-ui/core/DialogContent' \nimport DialogActions from '@material-ui/core/DialogActions'\n\n/**\n * Simple dialog box with a text field and two buttons Cancel and Save.\n * Three props need to be set: \n *  \n *  1. `onCancel` called when the cancel button is pressed ,\n *  2. `onSave` called when the save button is pressed \n *  3. open, boolean that indicates if the dialog is displayed (true) or not (false)\n *\n */\nexport default function SimpleDialog({ open, title, label, format, defaultValue, onCancel, onSave, ...props }) {\n\n  const [value, setValue] = useState(defaultValue)\n\n  //Calls `onCancel` prop and sets the default value\n  const handleOnCancel = (format) => {\n    onCancel() \n    setValue(defaultValue)\n  }\n  // Calls `onSave` prop and sets the default value\n  const handleOnSave = (event) => {\n    onSave({format, value})\n    setValue(defaultValue)\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleOnCancel}\n      aria-labelledby=\"dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n      fullWidth={true}\n      maxWidth={props.maxWidth ? props.maxWidth : 'xs' }\n    >\n      <DialogTitle id=\"dialog-title\">{title}</DialogTitle>\n      <DialogContent>\n        <TextField fullWidth multiline autoFocus defaultValue={defaultValue} label={label} variant=\"outlined\"  \n        onChange={(event) => setValue(event.target.value) }required />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => handleOnCancel()} color=\"primary\" variant='outlined'>\n          Cancel\n          </Button>\n        <Button onClick={(event)=> handleOnSave(event)} color=\"primary\" variant='contained'>\n          Save\n          </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nSimpleDialog.propTypes = {\n  /**\n   * If it is true, it displays the dialog window.\n   */\n  open: PropTypes.bool.isRequired, \n  /**\n   * Called whe the Cancel button is pressed \n   */\n  onCancel: PropTypes.func.isRequired,\n  /**\n   * Called when the save button is pressed\n   */\n  onSave: PropTypes.func.isRequired,\n  \n  /**\n   * Title of the dialog window\n   */\n  title: PropTypes.string,\n\n  /**\n   * Label of the textfield\n   */\n  label: PropTypes.string,\n\n  /**\n   * Format of the element to be added/edited. \n   * For example: bold, italic, comment, link, endnote\n   * \n   * Just required if you use the same dialog for different type of nodes.\n   */\n   format: PropTypes.string,\n\n  /**\n   * Default value displayed on the textfield.\n   */\n  defaultValue: PropTypes.string\n};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M22 4c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4zm-2 13.17L18.83 16H4V4h16v13.17zM13 5h-2v4H7v2h4v4h2v-4h4V9h-4z\"\n}), 'AddCommentOutlined');\n\nexports.default = _default;","import React from 'react'\nimport ToolbarButton from './ToolbarButton'\nimport AddCommentOutlinedIcon from '@material-ui/icons/AddCommentOutlined'\n\n/**\n * Toolbar button for adding comments.\n * \n * The button is disabled on collapse.\n * \n * @see ToolbarButton\n */\n\nconst AddCommentButton = React.forwardRef(\n  (props, ref) => {\n    return (\n      <ToolbarButton \n        icon={<AddCommentOutlinedIcon />} \n        type=\"other\" \n        disableOnCollapse={true} \n        tooltip=\"Add comment\" \n        format=\"comment\" \n        ref={ref} \n        {...props} />\n    )\n  }\n)\nexport default AddCommentButton  ","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h18v14zM5 15h14v3H5z\"\n}), 'CallToActionOutlined');\n\nexports.default = _default;","import React from 'react'\nimport ToolbarButton from './ToolbarButton'\nimport CallToActionOutlinedIcon from '@material-ui/icons/CallToActionOutlined'\n\n/**\n * Toolbar button for adding endnotes\n * \n * @see ToolbarButton\n */\n\nconst EndnoteButton = React.forwardRef(\n  (props, ref) => { \n    return (\n      <ToolbarButton \n        icon={<CallToActionOutlinedIcon />} \n        type=\"other\" \n        disableOnSelection={true} \n        tooltip=\"Add endnote\" \n        format=\"endnote\" \n        ref={ref} \n        {...props} />\n    )\n  }\n)\nexport default EndnoteButton  ","import React from 'react'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: '#e1f5fe',\n    cursor: 'pointer'\n  }\n}))\n\n/**\n * Renders a Comment. \n *  1. Adds blueish background to the text the comment wraps\n *  2. On hover displays the comment.\n * \n *  If `onClick` is passed, it is called if the text wrapped by the comment is clicked.\n * \n *  Expects the `element` object passed as prop to have `element.data.body` to display the comment text.\n * \n */\nconst CommentElement = ({ element, onClick, children, attributes }) => {\n  const classes = useStyles()\n  return (\n    <Tooltip title={`Comment: ${element.data.body}`} >\n      <span className={classes.root} {...attributes} onClick={(event) => onClick && onClick({ event, element })}>{children}</span>\n    </Tooltip>\n  )\n}\n\nexport default CommentElement","import React from 'react'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    cursor: 'pointer',\n  },\n}))\n\n/**\n * Displays a super index text with the index number of the endnote.\n * A tooltip with the content of the endnote is displayed if the user hovers the endnote.\n *\n * Expects the `element` prop to have `element.data.value` the text of the endnote (string) and\n * `element.data.index` the index number fo the endnote.\n *\n * If `onClick` prop is set it is called if user clicks the tex\n */\nconst EndnoteElement = ({ element, onClick, attributes, children }) => {\n  const classes = useStyles()\n  return (\n    <Tooltip placement=\"top\" title={`${element.data.value}`}>\n      <sup\n        className={classes.root}\n        {...attributes}\n        onClick={event => onClick && onClick({ event, element })}\n      >\n        {element.data.index || 'x'}\n        {children}\n      </sup>\n    </Tooltip>\n  )\n}\n\nexport default EndnoteElement\n","import React from 'react'\nimport { useSlate } from 'slate-react'\nimport PropTypes from 'prop-types'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  text: {\n    marginTop: theme.spacing(0.5),\n    marginLeft: theme.spacing(1),\n  },\n  textError: {\n    color: theme.palette.error.main,\n  },\n}))\n\n/**\n *\n * WordCounter for editor\n * It displays the number words, below the editor\n *  - If maxWords = 200, wordsLength = 90 `Ex: 90/200 words` will display in the counter\n *  - When maxWords is undefined, wordsLength = 90 `Ex: 90 words` will be displayed\n * Word counter will be displayed with error color, when wordLength exceeds maxWords\n */\nexport default function WordCounter({ maxWords }) {\n  const classes = useStyles()\n  const editor = useSlate()\n  const { children } = editor\n  // Words length\n  const wordsLength = editor.getWordsLength(children)\n  // Error based on words length limit\n  const errorExceedWordsLimit = wordsLength > maxWords\n\n  return (\n    <Typography\n      variant=\"subtitle2\"\n      color=\"textSecondary\"\n      className={`${classes.text} ${errorExceedWordsLimit &&\n        classes.textError}`}\n    >\n      {maxWords ? `${wordsLength} / ${maxWords}` : wordsLength} words\n    </Typography>\n  )\n}\n\nWordCounter.propTypes = {\n  /**\n   * To display maximum words in counter\n   *  - If maxWords = 200, wordsLength = 90 `Ex: 90/200 words` will display in the counter\n   *  - When maxWords is undefined, wordsLength = 90 `Ex: 90 words` will be displayed\n   */\n  maxWords: PropTypes.number,\n}\n","import React from 'react'\nimport { useSlate } from 'slate-react'\nimport Typography from '@material-ui/core/Typography'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n  text: {\n    marginTop: theme.spacing(0.5),\n    marginLeft: theme.spacing(1),\n  },\n  textError: {\n    color: theme.palette.error.main,\n  },\n}))\n\n/**\n *\n * CharCounter for editor\n * It displays the number characters in the editor\n *  - If maxChars = 200, charLength = 90  `Ex: 90/200 characters` will display in the counter\n *  - When maxChars is undefined, charLength = 90 `Ex: 90 characters` will be displayed\n * Char counter will be displayed with error color, when CharLength exceeds maxChars\n */\nexport default function CharCounter({ maxChars }) {\n  const classes = useStyles()\n  const editor = useSlate()\n  const { children } = editor\n  // Char length\n  const charLength = editor.getCharLength(children)\n  // Error based on chars length limit\n  const errorExceedCharsLimit = charLength > maxChars\n\n  return (\n    <Typography\n      variant=\"subtitle2\"\n      color=\"textSecondary\"\n      className={`${classes.text} ${errorExceedCharsLimit &&\n        classes.textError}`}\n    >\n      {maxChars ? `${charLength} / ${maxChars}` : charLength} characters\n    </Typography>\n  )\n}\n\nCharCounter.propTypes = {\n  /**\n   * To display maximum characters in counter\n   * - If maxChars = 200, charLength = 90  `Ex: 90/200 characters` will display in the counter\n   * - When maxChars is undefined, charLength = 90 `Ex: 90 characters` will be displayed\n   */\n  maxChars: PropTypes.number,\n}\n","// slate package overwrites\nimport MaterialEditor from './slate/MaterialEditor'\nimport createMaterialEditor from './slate/createMaterialEditor'\n\n//plugins\nimport withComments from './plugins/withComments'\nimport withEndnotes from './plugins/withEndnotes'\nimport withCounter from './plugins/withCounter'\n\n// slate-react package overwrites\nimport MaterialSlate from './slate-react/MaterialSlate'\nimport MaterialEditable from './slate-react/MaterialEditable'\nimport defaultRenderElement from './slate-react/defaultRenderElement'\nimport defaultRenderLeaf from './slate-react/defaultRenderLeaf'\n\n//Toolbar and base button components\nimport Toolbar from './components/Toolbars/Toolbar'\nimport HoveringToolbar from './components/Toolbars/HoveringToolbar'\nimport ToolbarButton from './components/Buttons/ToolbarButton'\nimport ButtonSeparator from './components/Buttons/ButtonSeparator'\nimport SimpleDialog from './components/SimpleDialog'\n//Block and mark Buttons\nimport BoldButton from './components/Buttons/BoldButton'\nimport ItalicButton from './components/Buttons/ItalicButton'\nimport StrikethroughButton from './components/Buttons/StrikethroughButton'\nimport CodeButton from './components/Buttons/CodeButton'\nimport UnderlinedButton from './components/Buttons/UnderlinedButton'\nimport BulletedListButton from './components/Buttons/BulletedListButton'\nimport NumberedListButton from './components/Buttons/NumberedListButton'\nimport AddCommentButton from './components/Buttons/AddCommentButton'\nimport EndnoteButton from './components/Buttons/EndnoteButton'\n// Render Elements\nimport CommentElement from './components/Elements/CommentElement'\nimport EndnoteElement from './components/Elements/EndnoteElement'\n//Counters\nimport WordCounter from './components/Counters/WordCounter'\nimport CharCounter from './components/Counters/CharCounter'\n\nif (process.env.NODE_ENV !== 'production') {\n  console.log('MaterialEditor: not in production')\n} else {\n  console.log('MaterialEditor: production mode')\n}\n\nexport {\n  MaterialEditor,\n  MaterialSlate,\n  MaterialEditable,\n  createMaterialEditor,\n  withComments,\n  withEndnotes,\n  defaultRenderElement,\n  defaultRenderLeaf,\n  Toolbar,\n  HoveringToolbar,\n  ToolbarButton,\n  ButtonSeparator,\n  BoldButton,\n  ItalicButton,\n  StrikethroughButton,\n  CodeButton,\n  UnderlinedButton,\n  BulletedListButton,\n  NumberedListButton,\n  AddCommentButton,\n  EndnoteButton,\n  CommentElement,\n  EndnoteElement,\n  SimpleDialog,\n  WordCounter,\n  CharCounter,\n  withCounter,\n}\n","import React from 'react'\nimport Box from '@material-ui/core/Box'\nimport PropTypes from 'prop-types'\nimport {useTheme} from '@material-ui/core/styles'\n\n/**\n * Toolbar button separator.\n * \n * Displays an horizontal line. Use it for separating groups of buttons. \n * \n */\n\nexport default function ButtonSeparator({borderColor, ...other}) {\n  const theme = useTheme()\n  return(\n    <Box display=\"inline\"  {...other}>\n        <Box borderLeft={1} borderColor={borderColor ? borderColor : \"grey.400\"} marginLeft=\"2px\" marginRight=\"2px\" display=\"inline\"></Box>\n    </Box>\n  )\n}\n\n","import { createEditor } from 'slate'\n\n// slate plugins\nimport { withReact } from 'slate-react'\nimport { withHistory } from 'slate-history'\n\n// Import material editor plugins\nimport withBase from '../plugins/withBase'\nimport withMarks from '../plugins/withMarks'\nimport withBlocks from '../plugins/withBlocks'\n\n/**\n * Creates a RichText editor.\n *\n * Includes the following plugins\n *  - withBlocks\n *  - withMarks\n *  - withBase\n *  - withHistory\n *  - withReact\n *\n * @param {string} editorId Optional unique identifier in case you have more than one editor. Defaults to default.\n * @public\n */\nexport default function createMaterialEditor(editorId = 'default') {\n  const editor = withBlocks(\n    withMarks(withBase(withHistory(withReact(createEditor()))))\n  )\n  editor.editorId = editorId\n  return editor\n}\n","import { Node } from 'slate'\n/**\n *\n * Counter plugin for Material Slate.\n *\n * @param {Editor} editor\n */\nconst withCounter = editor => {\n  /**\n   * Returns the chars length\n   */\n  editor.getCharLength = nodes => {\n    return editor.serialize(nodes).length\n  }\n\n  /**\n   * Returns the words length\n   * \n   */\n  editor.getWordsLength = nodes => {\n    const content = editor.serialize(nodes)\n    //Reg exp from https://css-tricks.com/build-word-counter-app/\n    return content.length ? content.match(/\\b[-?(\\w+)?]+\\b/gi).length : 0\n  }\n\n  /**\n   * Returns the paragraphs length\n   */\n  editor.getParagraphLength = nodes => {\n    return nodes\n      .map(n => Node.string(n))\n      .join('\\n')\n      .split(/\\r\\n|\\r|\\n/).length\n  }\n\n  return editor\n}\n\nexport default withCounter\n","\nimport { Editor } from 'slate'\n/**\n * Plugin for handling endnote synced type\n * \n * Requires withBase plugin\n */\nconst withEndnotes = editor => {\n  const { isInline, isVoid } = editor\n\n  const ENDNOTE_TYPE = 'endnote'\n\n  /**\n   * Overwrite to indicate `endnote` nodes are inline\n   */\n  editor.isInline = element => {\n    return element.type === ENDNOTE_TYPE ? true : isInline(element)\n  }\n\n  /**\n   * Overwrite to indicate `endnote` nodes are void\n   */\n  editor.isVoid = element => {\n    return element.type === ENDNOTE_TYPE ? true : isVoid(element)\n  }\n\n  /**\n   * If the editor loses focus upon pressing the `AddEndnoteButton`, you need to call \n   * editor.rememberCurrentSelection() before the editor loses the focus  \n   * \n   * `data` cannot contain the following items: id, type or children.\n   */ \n  editor.addEndnote = (id,data) => {\n    const text = { text: '' }\n    const node = {\n      id: id,\n      type: ENDNOTE_TYPE,\n      children: [text], \n      data //any data of the comment will be an attribute.\n    } \n    editor.wrapNode(node, editor.selection || editor.rememberedSelection)  \n    return node\n  }\n  \n  /**\n   * Gets the endnote node previous to this one.\n   * If there is no endnote, returns null\n   */\n  editor.previousEndnoteNode = (endnoteId) => {\n    let previous = null\n    const endnotes = editor.findNodesByType(ENDNOTE_TYPE)\n    for(const endnote of endnotes) {\n      if (endnote.id === endnoteId) {\n        break\n      } \n      previous = endnote\n    \n    }\n    return previous\n  }\n\n   /**\n   *  Synchronizes endnotes.\n   * \n   * It receives a list of endnotes. \n   *  - Endnotes that are in the editor but not in the list are deleted\n   *  - Endnotes of the endnotes that are in the list are updated.\n   * \n   * Each endnote is identified by `id` attribute in the node.\n   * \n   * @param {Array} endnotesToKeep is a list of endnotes objects that have an attribute `id`.\n   */\n  editor.syncEndnotes= (endnotesToKeep) => {\n    editor.syncExternalNodes(ENDNOTE_TYPE, endnotesToKeep, false)\n  }\n\n  return editor\n}\n\nexport default withEndnotes\n\n\n","\n\nconst initialValue = () => {\n  return (\n    [\n      {\n        type: 'paragraph',\n        children: [\n          { text: 'Basic example. This is editable ' },\n          { text: 'rich', bold: true },\n          { text: ' text, ' },\n          { text: 'much', italic: true },\n          { text: ' better than a ' },\n          { text: '<textarea>', code: true },\n          { text: '!' },\n        ],\n      },\n      {\n        type: 'paragraph',\n        children: [\n          {\n            text:\n              \"Since it's rich text, you can do things like turn a selection of text \",\n          },\n          { text: 'bold', bold: true },\n          {\n            text:\n              ', or add a semantically rendered block quote in the middle of the page, like this:',\n          },\n        ],\n      },\n      {\n        type: 'block-quote',\n        children: [{ text: 'A wise quote.' }],\n      }\n    ]\n  )\n}\nexport default initialValue","\nimport React from \"react\"\nimport { useState, useMemo } from \"react\"\nimport {\n  MaterialSlate,\n  MaterialEditable,\n  createMaterialEditor,\n  Toolbar\n} from '@unicef/material-slate' \n\n//Initial contents of the editor\nimport initialValue from './initialValue'\n\n/**\n * Basic Material Slate example\n */\nexport default function Basic() {\n  // Holds the value of the editor\n  const [value, setValue] = useState(initialValue())\n\n  // An instance of material editor. It is an slate editor with a few more functions\n  const editor = useMemo(() => createMaterialEditor(), [])\n\n  return (\n      <MaterialSlate editor={editor} value={value} onChange={(value) => setValue(value)}>\n        <Toolbar />\n        <MaterialEditable />\n      </MaterialSlate>\n  )\n}\n","\nimport React from \"react\"\nimport { useState, useMemo} from \"react\"\nimport {\n  MaterialSlate,\n  MaterialEditable,\n  createMaterialEditor,\n  HoveringToolbar\n} from '@unicef/material-slate'\n\n//Initial contents of the editor\nimport initialValue from './initialValue'\n\n/**\n * Instance of a Material Slate with hovering toolbar, that is, a toolbar that appears only when a text is \n * selected and hovering that selection. \n */\nexport default function Hovering() {\n  // Holds the value of the editor\n  const [value, setValue] = useState(initialValue())\n\n  // An instance of material editor. It is an slate editor with a few more functions\n  const editor = useMemo(() => createMaterialEditor(), [])\n\n  return (\n      <MaterialSlate editor={editor} value={value} onChange={(value) => setValue(value)}>\n        <HoveringToolbar />\n        <MaterialEditable />\n      </MaterialSlate>\n  );\n  }\n","\nimport React from \"react\"\nimport { useState, useMemo } from \"react\"\nimport {\n  MaterialSlate,\n  MaterialEditable,\n  createMaterialEditor,\n  Toolbar,\n  ToolbarButton, \n  defaultRenderElement,\n  defaultRenderLeaf\n} from '@unicef/material-slate' \n\nimport FormatColorFillIcon from '@material-ui/icons/FormatColorFill'\nimport FormatSizeIcon from '@material-ui/icons/FormatSize';\n\nimport { makeStyles } from '@material-ui/core/styles'\n\n//Initial contents of the editor\nimport initialValue from './initialValue'\n\nconst useStyles = makeStyles( theme => ({\n  highlighted: {\n    display: 'inline-block',\n    backgroundColor: 'yellow',\n    color: 'red'\n  },\n  bigger: {\n    fontSize: '125%'\n  },\n  customSlate: {\n    backgroundColor: theme.palette.grey[800],\n    color: 'white',\n    borderWidth: 1,\n    borderColor: 'transparent',\n    '&:hover': {\n      borderWidth: 1,\n    }\n  },\n  focused: {\n    borderWidth: 1,\n    borderColor: theme.palette.grey[400],\n    '&:hover': {\n      borderColor: theme.palette.grey[400],\n    }\n  },\n  customEditable: {\n    fontFamily: 'Courier'\n  }\n}))\n\n/**\n * Custom buttons material slate example\n */\nexport default function CustomButtons() {\n  // Holds the value of the editor\n  const [value, setValue] = useState(initialValue())\n\n  // An instance of material editor. It is an slate editor with a few more functions\n  const editor = useMemo(() => createMaterialEditor(), [])\n\n  const classes = useStyles()\n\n  // handles block button renders\n  const handleRenderElement = ({ element, children, attributes, ...rest }) => {\n\n    switch (element.type) {\n      case 'bigger':\n        return <p className={classes.bigger} {...attributes}>{children}</p> \n    }\n   \n    // Include a call to defaultRenderElement if you want to include \n    return defaultRenderElement({ element, children, attributes, ...rest })\n  }\n\n  // Add leaf handler to handle marks\n  const handleRenderLeaf = ({leaf, attributes, children, text }) => {\n    //For each mark add a leaf with the same \n    if (leaf.highlighted) {\n      children = <span className={classes.highlighted}>{children}</span>\n    }\n    //You can also overwrite \n\n  // Include a call to defaultRenderLeaf if you want to render marks that come out of the box\n  // in material-slate\n  // If you don't want to use them just return this\n  // ```\n  //  return <span {...attributes}>{children}</span> \n  //\n  // ``` \n  return defaultRenderLeaf({leaf, children, attributes, text})\n  }\n\n  return (\n      <MaterialSlate editor={editor} value={value} onChange={(value) => setValue(value)} \n      className={classes.customSlate}\n      focusClassName={classes.focused}>\n        {/* By default toolbars display a set of default buttons if no children\n            but if childrens are added you have to specified all toolbar buttons\n            List of available buttons is in /src/components/Buttons \n          */}\n        <Toolbar >\n          {/* Mark buttons are useful for inline stuff like bold, italic, etc. */}\n          <ToolbarButton icon={<FormatColorFillIcon /> } type=\"mark\" format=\"highlighted\" />     \n          {/* Block type buttons are useful for block content such as headings */}\n          <ToolbarButton icon={<FormatSizeIcon />} type=\"block\" format=\"bigger\" />\n\n          \n        </Toolbar>\n        <MaterialEditable \n        renderElement={handleRenderElement}\n        renderLeaf={handleRenderLeaf}\n        className={classes.customEditable}\n        />\n      </MaterialSlate>\n  )\n}\n","import React from 'react'\nimport { useState, useMemo } from 'react'\nimport {\n  MaterialSlate,\n  MaterialEditable,\n  createMaterialEditor,\n  Toolbar,\n  WordCounter,\n  CharCounter,\n  withCounter,\n} from '@unicef/material-slate'\nimport Box from '@material-ui/core/Box'\n//Initial contents of the editor\nimport initialValue from './initialValue'\nimport { Divider } from '@material-ui/core'\n\n/**\n * Words and characters counter example for Material Slate\n */\nexport default function Counter() {\n  // Holds the value of the editor\n  const [value, setValue] = useState(initialValue())\n\n  // An instance of material editor. It is an slate editor with a few more functions\n  const editor = useMemo(() => withCounter(createMaterialEditor()), [])\n\n  return (\n    <>\n      <MaterialSlate\n        editor={editor}\n        value={value}\n        onChange={value => setValue(value)}\n      >\n        <Toolbar />\n        <MaterialEditable />\n        <Divider />\n        <Box display=\"flex\" justifyContent=\"space-between\" mr={1}>\n          <WordCounter maxWords={42} />\n          <CharCounter maxChars={200} />\n        </Box>\n      </MaterialSlate>\n    </>\n  )\n}\n","\nimport React from \"react\"\nimport { useState, useMemo } from \"react\"\nimport {\n  MaterialSlate,\n  MaterialEditable,\n  createMaterialEditor,\n  Toolbar,\n  HoveringToolbar\n} from '@unicef/material-slate' \n\n//Initial contents of the editor\nimport initialValue from './initialValue'\n\n/**\n * Basic Material Slate example\n */\nexport default function ReadOnly() {\n  // Holds the value of the editor\n  const [value, setValue] = useState(initialValue())\n\n  // An instance of material editor. It is an slate editor with a few more functions\n  const editor = useMemo(() => createMaterialEditor(), [])\n\n  return (\n      <MaterialSlate editor={editor} value={value} onChange={(value) => setValue(value)}>\n        <Toolbar></Toolbar>\n        <HoveringToolbar></HoveringToolbar>\n        <MaterialEditable readOnly={true}/>\n      </MaterialSlate>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useState, useMemo, useCallback } from 'react'\nimport {\n  MaterialSlate,\n  MaterialEditable,\n  createMaterialEditor,\n  Toolbar,\n  HoveringToolbar,\n  ToolbarButton,\n  ButtonSeparator,\n  BoldButton,\n  ItalicButton,\n  CodeButton,\n  UnderlinedButton,\n  StrikethroughButton,\n  BulletedListButton,\n  NumberedListButton,\n  AddCommentButton,\n  EndnoteButton,\n  SimpleDialog,\n  defaultRenderElement,\n  withEndnotes,\n  withComments,\n  CommentElement,\n  EndnoteElement,\n} from '@unicef/material-slate'\n\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport Box from '@material-ui/core/Box'\n\nimport DeleteOutline from '@material-ui/icons/DeleteOutline'\nimport IconButton from '@material-ui/core/IconButton'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\n// Initial contents of the editor\nimport initialValue from './initialValue'\n\n/**\n * Example of advanced usage of the editor\n *\n * It shows how to create an editor that supports inline comments and endnotes, both of them\n * with the possibility to be handled as external lists (ie you can edit or delete comments/endnotes outside\n * the editor and sync them)\n */\nexport default function Advanced() {\n  const [value, setValue] = useState(initialValue())\n\n  const editor = useMemo(\n    () => withEndnotes(withComments(createMaterialEditor())),\n    []\n  )\n  // Handles the dialog that is opened upon clicking the Comment Toolbar/HoveringBar button\n  const [openCommentDialog, setOpenCommentDialog] = useState(false)\n  // Handles the dialog that is opened upon clicking the Endnote Toolbar/HoveringBar button\n  const [openEndnoteDialog, setOpenEndnoteDialog] = useState(false)\n\n  // External list of comments\n  const [comments, setComments] = useState([])\n  // External list of endnotes\n  const [endnotes, setEndnotes] = useState([])\n\n  // Handles custom buttons click\n  const onCustomButtonDown = ({ event, type, format, editor }) => {\n    switch (format) {\n      case 'comment':\n        // When the dialog box is opened, the focus is lost as well as current selected text.\n        // We need to save it for later on.\n        editor.rememberCurrentSelection()\n        setOpenCommentDialog(true)\n        return\n      case 'endnote':\n        editor.rememberCurrentSelection()\n        setOpenEndnoteDialog(true)\n        return\n      default:\n        console.log('Add a case for format:', format)\n    }\n  }\n\n  // Handle User clicked the cancel button of the dialog box.\n  // Just closes the dialogs\n  const handleDialogCancel = () => {\n    console.log('Dialog cancelled')\n    setOpenCommentDialog(false)\n    setOpenEndnoteDialog(false)\n  }\n\n  const handleDialogSave = (format, dialogValue) => {\n    // In a real app, is in this function where we could call an API to store the comment/endnote\n    switch (format) {\n      case 'comment':\n        setOpenCommentDialog(false)\n        console.log('save Comment:' + dialogValue)\n        // In this example we only save the value and an id\n        // But we could add user information, date, resolved or not,...\n        const comment = {\n          id: new Date().getTime(),\n          body: dialogValue,\n        }\n        // Adds the comment to the editor.\n        // The comment will wrap the selected text when `rememberCurrentSelection()` was called\n        editor.addComment(comment.id, comment)\n        // Updates the comment array and add comment in editor\n        setComments([...comments, comment])\n        return\n      case 'endnote':\n        setOpenEndnoteDialog(false)\n        console.log('save Endnote:' + dialogValue)\n        let endnote = {\n          id: new Date().getTime(),\n          value: dialogValue,\n          index: -1,\n        }\n        // Add the endnote to the editor in the point the cursor was when the button was clicked\n        editor.addEndnote(endnote.id, endnote)\n        // Update the external list. First get previous endnote in the editor\n        const previousNode = editor.previousEndnoteNode(endnote.id)\n        // Then get the position of the previous endnote in the endnotes array\n        const position = previousNode\n          ? endnotes.map(e => e.id).indexOf(previousNode.id) + 1\n          : 0\n        // Add the endnote in the position\n        let newEndnotes = [...endnotes]\n        newEndnotes.splice(position, 0, endnote)\n        // Renumber all endnotes\n        const newEndnotes2 = newEndnotes.map((endnote, index) => {\n          index = index + 1\n          return { ...endnote, index }\n        })\n        setEndnotes(newEndnotes2)\n        return\n      default:\n      //console.log('Add a case for format:', format )\n    }\n  }\n\n  // Deletes a comment that is in the comment list\n  const handleDeleteComment = commentId => {\n    const newList = comments.filter(comment => comment.id !== commentId)\n    console.log('deleteComment', newList)\n    setComments(newList)\n  }\n\n  // Deletes an endnote that is in the endnote list\n  // then updates the indexes\n  const handleDeleteEndnote = endnoteId => {\n    const newList = endnotes.filter(endnote => endnote.id !== endnoteId) \n      .map((endnote, index) => { //update index\n        index = index + 1\n        return { ...endnote, index }\n      })\n    console.log('deleteEndnote', newList)\n    setEndnotes(newList)\n  }\n\n  // This is a key element of the external lists.\n  // Whenever the comment list is changed, this effect is triggered.\n  useEffect(() => {\n    console.log('updated comments', comments)\n    // It syncs the external list with the comments within the editor.\n    // For each comment in the list it will update the data attribute of the comment\n    // It will also unwrap (ie remove) the comments that are in the editor but not in the list.\n    editor.syncComments(comments)\n  }, [comments, editor])\n\n  // Same as the function above, but for the endnotes\n  useEffect(() => {\n    console.log('updated endnotes', endnotes)\n    editor.syncEndnotes(endnotes)\n  }, [endnotes, editor])\n\n  // All the basic buttons are handled within the MaterialEditable, but custom toolbar buttons\n  // shall be handled in this function.\n  //\n  // Always render the children.\n  const handleRenderElement = useCallback(\n    ({ element, children, attributes, ...rest }) => {\n      switch (element.type) {\n        case 'comment':\n          return (\n            <CommentElement element={element} attributes={attributes}>\n              {children}\n            </CommentElement>\n          )\n        case 'endnote':\n          return (\n            <EndnoteElement element={element} attributes={attributes}>\n              {children}\n            </EndnoteElement>\n          )\n        default:\n          return defaultRenderElement({\n            element,\n            children,\n            attributes,\n            ...rest,\n          })\n      }\n    },\n    []\n  )\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid item sm={6}>\n          <MaterialSlate\n            editor={editor}\n            value={value}\n            onChange={value => setValue(value)}\n            onBlur={() => console.log('blur')}\n          >\n            {/* By passing Buttons as children of the Toolbar you can customize it */}\n            <Toolbar>\n              <BoldButton />\n              <ItalicButton />\n              <UnderlinedButton />\n              <StrikethroughButton />\n              <CodeButton />\n              <ButtonSeparator />\n              <BulletedListButton />\n              <NumberedListButton />\n\n              {/* Disabled button.\n            you can also use disableOnCollapse and disableOnSelection */}\n              <ToolbarButton type=\"block\" format=\"blockquote\" disabled />\n\n              {/* These two buttons require actions to be handled onMouseDown */}\n              <AddCommentButton\n                onMouseDown={event => onCustomButtonDown(event)}\n              />\n              <EndnoteButton onMouseDown={event => onCustomButtonDown(event)} />\n            </Toolbar>\n            <HoveringToolbar>\n              <BoldButton />\n              <ItalicButton />\n              <UnderlinedButton />\n              <StrikethroughButton />\n              <AddCommentButton\n                onMouseDown={event => onCustomButtonDown(event)}\n              />\n            </HoveringToolbar>\n            <MaterialEditable\n              renderElement={props => handleRenderElement(props)}\n            ></MaterialEditable>\n          </MaterialSlate>\n          <SimpleDialog\n            open={openCommentDialog}\n            title=\"Add comment\"\n            label=\"Comment\"\n            defaultValue=\"\"\n            format=\"comment\"\n            onCancel={() => handleDialogCancel()}\n            onSave={({ format, value }) => handleDialogSave(format, value)}\n          />\n          <SimpleDialog\n            open={openEndnoteDialog}\n            title=\"Add endnote\"\n            label=\"Endnote\"\n            defaultValue=\"\"\n            format=\"endnote\"\n            onCancel={() => handleDialogCancel()}\n            onSave={({ format, value }) => handleDialogSave(format, value)}\n          />\n        </Grid>\n        <Grid>\n          <Typography variant=\"caption\">External Comments List</Typography>\n          {comments.length === 0 ? (\n            <Typography>No comments</Typography>\n          ) : (\n            <List dense>\n              {comments.map(comment => (\n                <ListItem key={comment.id}>\n                  <ListItemText>{comment.body}</ListItemText>\n                  <ListItemSecondaryAction>\n                    <IconButton\n                      edge=\"end\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      <DeleteOutline />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          )}\n          <Box marginTop={2}>\n            <Typography variant=\"caption\">External Endnotes List</Typography>\n            {endnotes.length === 0 ? (\n              <Typography>No endnotes</Typography>\n            ) : (\n              <List dense>\n                {endnotes.map(endnote => (\n                  <ListItem key={endnote.id}>\n                    <ListItemText>\n                      [{endnote.index}] {endnote.value}\n                    </ListItemText>\n                    <ListItemSecondaryAction>\n                      <IconButton\n                        edge=\"end\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDeleteEndnote(endnote.id)}\n                      >\n                        <DeleteOutline />\n                      </IconButton>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                ))}\n              </List>\n            )}\n          </Box>\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n","import React from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\n\n\nimport Basic from './Basic'\nimport Hovering from './Hovering'\nimport CustomButtons from './CustomButtons'\nimport Counter from './Counter'\nimport ReadOnly from './ReadOnly'\nimport Advanced from './Advanced'\n\nconst useStyles = makeStyles(theme => ({\n  intro: {\n    marginLeft: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n  },\n  air: {\n    margin: theme.spacing(2),\n    padding: theme.spacing(2),\n  },\n  readable: {\n    maxWidth: 800,\n  },\n}))\n\nexport default function App() {\n  const classes = useStyles()\n  return (\n    <>\n      <Box className={classes.intro}>\n        <Typography variant=\"h1\">UNICEF Material Slate</Typography>\n        <Typography>\n          A simple rich text editor for React that uses Material UI and Slate\n        </Typography>\n      </Box>\n      <Box className={classes.air}>\n        <Typography variant=\"h4\">\n          <a href=\"https://github.com/unicef/material-slate/\">\n            View README on Github\n          </a>\n        </Typography>\n      </Box>\n      <Box className={`${classes.air} ${classes.readable} `}>\n        <Typography variant=\"h2\">Basic Editor Example</Typography>\n        <a href=\"https://github.com/unicef/material-slate/blob/master/example/src/Basic.js\">\n          View source code\n        </a>\n        <Basic />\n      </Box>\n\n      <Box className={`${classes.air} ${classes.readable} `}>\n        <Typography variant=\"h2\">Hover toolbar</Typography>\n        <Typography>Toolbar appears on selecting a text</Typography>\n        <a href=\"https://github.com/unicef/material-slate/blob/master/example/src/Hovering.js\">\n          View source code\n        </a>\n        <Hovering />\n      </Box>\n\n      <Box className={`${classes.air} ${classes.readable} `}>\n        <Typography variant=\"h2\">Custom Buttons & Styles</Typography>\n        <Typography>Create custom buttons and custom style</Typography>\n        <a href=\"https://github.com/unicef/material-slate/blob/master/example/src/CustomButtons.js\">\n          View source code\n        </a>\n        <CustomButtons />\n      </Box>\n\n      <Box className={`${classes.air} ${classes.readable} `}>\n        <Typography variant=\"h2\">Word and character counter</Typography>\n        <a href=\"https://github.com/unicef/material-slate/blob/master/example/src/Counter.js\">\n          View source code\n        </a>\n        <Counter />\n      </Box>\n\n      <Box className={`${classes.air} ${classes.readable} `}>\n        <Typography variant=\"h2\">Read only mode</Typography>\n        <a href=\"https://github.com/unicef/material-slate/blob/master/example/src/ReadOnly.js\">\n          View source code\n        </a>\n        <ReadOnly />\n      </Box>\n\n      <Box className={classes.air}>\n        <Typography variant=\"h2\">Advanced usage </Typography>\n        <a href=\"https://github.com/unicef/material-slate/blob/master/example/src/Advanced.js\">\n          View source code\n        </a>\n        <Advanced />\n      </Box>\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}